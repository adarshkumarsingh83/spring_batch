<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
                           http://www.springframework.org/schema/batch/spring-batch.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- partitioner job -->
    <batch:job id="partitionJob" job-repository="jobRepository">

        <!-- master step, 10 threads (grid-size)  -->
        <batch:step id="masterStep">
            <batch:partition step="slave" partitioner="rangePartitioner">
                <batch:handler grid-size="50" task-executor="taskExecutor" />
            </batch:partition>
        </batch:step>

    </batch:job>

    <!-- Jobs to run -->
    <batch:step id="slave">
        <batch:tasklet transaction-manager="transactionManager">
            <batch:chunk reader="pagingItemReader" writer="flatFileItemWriter"
                         processor="itemProcessor" commit-interval="1" />
        </batch:tasklet>
    </batch:step>

    <bean id="rangePartitioner" class="com.adarsh.spring.batch.partition.RangePartitioner" />

    <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />

    <bean id="itemProcessor" class="com.adarsh.spring.batch.processor.EmployeeProcessor"
          scope="step">
        <property name="threadName" value="#{stepExecutionContext[name]}" />
    </bean>

    <bean id="pagingItemReader"
          class="org.springframework.batch.item.database.JdbcPagingItemReader"
          scope="step">
        <property name="dataSource" ref="dataSource" />
        <property name="queryProvider">
            <bean
                    class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="dataSource" />
                <property name="selectClause" value="${app.db.mysql.query}" />
                <property name="fromClause" value="${app.db.mysql.query.table}" />
                <property name="whereClause" value="WHERE EMPID &gt;= :fromId and EMPID &lt;= :toId" />
                <property name="sortKey" value="EMPID" />
            </bean>
        </property>
        <!-- Inject via the ExecutionContext in rangePartitioner -->
        <property name="parameterValues">
            <map>
                <entry key="fromId" value="#{stepExecutionContext[fromId]}" />
                <entry key="toId" value="#{stepExecutionContext[toId]}" />
            </map>
        </property>
        <property name="pageSize" value="10" />
        <property name="rowMapper">
            <bean class="com.adarsh.spring.batch.mapper.EmployeeRowMapper" />
        </property>
    </bean>

    <!-- csv file writer -->
    <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
          scope="step" >
        <property name="resource"
                  value="file:csv/outputs/employee.processed#{stepExecutionContext[fromId]}-#{stepExecutionContext[toId]}.csv" />
        <property name="appendAllowed" value="false" />
        <property name="shouldDeleteIfExists" value="true"/>
        <property name="lineAggregator">
            <bean
                    class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value="," />
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="${app.csv.head.name}" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

</beans>